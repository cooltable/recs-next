type User {
  id: ID! @unique
  name: String!
  email: String! @unique
  username: String! @unique
  password: String!
  friends: [User!]! @relation(name: "Friends", onDelete: SET_NULL)
  sentRecs: [Rec!]! @relation(name: "SentRecommendations", onDelete: CASCADE)
  recievedRecs: [Rec!]! @relation(name: "ReceivedRecommendations", onDelete: CASCADE)
  requests: [Request!]! @relation(name: "UserRequests", onDelete: CASCADE)
  updatedAt: DateTime!
  createdAt: DateTime!
}

type Rec {
  id: ID! @unique
  title: String!
  description: String!
  comment: String
  response: String
  type: RecType!
  priority: Boolean!
  rating: Int!
  image: String!
  updatedAt: DateTime!
  createdAt: DateTime!
  status: StatusType! @default(value: "SENT")
  fromUser: User! @relation(name: "SentRecommendations", onDelete: SET_NULL)
  toUsers: [User!]! @relation(name: "ReceivedRecommendations", onDelete: SET_NULL)
}

type Request {
  id: ID! @unique
  type: RecType!
  description: String!
  recommendations: [Rec!]!
  updatedAt: DateTime!
  createdAt: DateTime!
  expires: DateTime
  author: User! @relation(name: "UserRequests", onDelete: SET_NULL)
}

enum RecType {
  Television_show
  Movie
  Book
  Article
  Restaurant
}

enum StatusType {
  SENT
  SEEN 
  DISCARDED
  BOOKMARKED
}

