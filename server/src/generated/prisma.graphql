# source: http://localhost:4466/recs/default
# timestamp: Sat Dec 01 2018 21:06:58 GMT-0800 (PST)

type AggregateComment {
  count: Int!
}

type AggregateFriendRequest {
  count: Int!
}

type AggregateRec {
  count: Int!
}

type AggregateRequest {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Comment implements Node {
  id: ID!
  text: String!
  author: User!
  rec: Rec!
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type CommentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  text: String!
  author: UserCreateOneWithoutCommentsInput!
  rec: RecCreateOneWithoutCommentsInput!
}

input CommentCreateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutRecInput {
  create: [CommentCreateWithoutRecInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutAuthorInput {
  text: String!
  rec: RecCreateOneWithoutCommentsInput!
}

input CommentCreateWithoutRecInput {
  text: String!
  author: UserCreateOneWithoutCommentsInput!
}

"""An edge in a connection."""
type CommentEdge {
  """The item at the end of the edge."""
  node: Comment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CommentPreviousValues {
  id: ID!
  text: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
}

input CommentUpdateInput {
  text: String
  author: UserUpdateOneRequiredWithoutCommentsInput
  rec: RecUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateManyMutationInput {
  text: String
}

input CommentUpdateManyWithoutAuthorInput {
  create: [CommentCreateWithoutAuthorInput!]
  connect: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutAuthorInput!]
}

input CommentUpdateManyWithoutRecInput {
  create: [CommentCreateWithoutRecInput!]
  connect: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutRecInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutRecInput!]
}

input CommentUpdateWithoutAuthorDataInput {
  text: String
  rec: RecUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithoutRecDataInput {
  text: String
  author: UserUpdateOneRequiredWithoutCommentsInput
}

input CommentUpdateWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutAuthorDataInput!
}

input CommentUpdateWithWhereUniqueWithoutRecInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutRecDataInput!
}

input CommentUpsertWithWhereUniqueWithoutAuthorInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutAuthorDataInput!
  create: CommentCreateWithoutAuthorInput!
}

input CommentUpsertWithWhereUniqueWithoutRecInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutRecDataInput!
  create: CommentCreateWithoutRecInput!
}

input CommentWhereInput {
  """Logical AND on all given filters."""
  AND: [CommentWhereInput!]

  """Logical OR on all given filters."""
  OR: [CommentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CommentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  author: UserWhereInput
  rec: RecWhereInput
}

input CommentWhereUniqueInput {
  id: ID
}

scalar DateTime

type FriendRequest implements Node {
  id: ID!
  to: User!
  from: User!
  status: ReqStatusType!
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type FriendRequestConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FriendRequestEdge]!
  aggregate: AggregateFriendRequest!
}

input FriendRequestCreateInput {
  status: ReqStatusType
  to: UserCreateOneWithoutReceivedFriendRequestsInput!
  from: UserCreateOneWithoutSentFriendRequestsInput!
}

input FriendRequestCreateManyWithoutFromInput {
  create: [FriendRequestCreateWithoutFromInput!]
  connect: [FriendRequestWhereUniqueInput!]
}

input FriendRequestCreateManyWithoutToInput {
  create: [FriendRequestCreateWithoutToInput!]
  connect: [FriendRequestWhereUniqueInput!]
}

input FriendRequestCreateWithoutFromInput {
  status: ReqStatusType
  to: UserCreateOneWithoutReceivedFriendRequestsInput!
}

input FriendRequestCreateWithoutToInput {
  status: ReqStatusType
  from: UserCreateOneWithoutSentFriendRequestsInput!
}

"""An edge in a connection."""
type FriendRequestEdge {
  """The item at the end of the edge."""
  node: FriendRequest!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FriendRequestOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type FriendRequestPreviousValues {
  id: ID!
  status: ReqStatusType!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type FriendRequestSubscriptionPayload {
  mutation: MutationType!
  node: FriendRequest
  updatedFields: [String!]
  previousValues: FriendRequestPreviousValues
}

input FriendRequestSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FriendRequestSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FriendRequestSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FriendRequestSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FriendRequestWhereInput
}

input FriendRequestUpdateInput {
  status: ReqStatusType
  to: UserUpdateOneRequiredWithoutReceivedFriendRequestsInput
  from: UserUpdateOneRequiredWithoutSentFriendRequestsInput
}

input FriendRequestUpdateManyMutationInput {
  status: ReqStatusType
}

input FriendRequestUpdateManyWithoutFromInput {
  create: [FriendRequestCreateWithoutFromInput!]
  connect: [FriendRequestWhereUniqueInput!]
  disconnect: [FriendRequestWhereUniqueInput!]
  delete: [FriendRequestWhereUniqueInput!]
  update: [FriendRequestUpdateWithWhereUniqueWithoutFromInput!]
  upsert: [FriendRequestUpsertWithWhereUniqueWithoutFromInput!]
}

input FriendRequestUpdateManyWithoutToInput {
  create: [FriendRequestCreateWithoutToInput!]
  connect: [FriendRequestWhereUniqueInput!]
  disconnect: [FriendRequestWhereUniqueInput!]
  delete: [FriendRequestWhereUniqueInput!]
  update: [FriendRequestUpdateWithWhereUniqueWithoutToInput!]
  upsert: [FriendRequestUpsertWithWhereUniqueWithoutToInput!]
}

input FriendRequestUpdateWithoutFromDataInput {
  status: ReqStatusType
  to: UserUpdateOneRequiredWithoutReceivedFriendRequestsInput
}

input FriendRequestUpdateWithoutToDataInput {
  status: ReqStatusType
  from: UserUpdateOneRequiredWithoutSentFriendRequestsInput
}

input FriendRequestUpdateWithWhereUniqueWithoutFromInput {
  where: FriendRequestWhereUniqueInput!
  data: FriendRequestUpdateWithoutFromDataInput!
}

input FriendRequestUpdateWithWhereUniqueWithoutToInput {
  where: FriendRequestWhereUniqueInput!
  data: FriendRequestUpdateWithoutToDataInput!
}

input FriendRequestUpsertWithWhereUniqueWithoutFromInput {
  where: FriendRequestWhereUniqueInput!
  update: FriendRequestUpdateWithoutFromDataInput!
  create: FriendRequestCreateWithoutFromInput!
}

input FriendRequestUpsertWithWhereUniqueWithoutToInput {
  where: FriendRequestWhereUniqueInput!
  update: FriendRequestUpdateWithoutToDataInput!
  create: FriendRequestCreateWithoutToInput!
}

input FriendRequestWhereInput {
  """Logical AND on all given filters."""
  AND: [FriendRequestWhereInput!]

  """Logical OR on all given filters."""
  OR: [FriendRequestWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FriendRequestWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  status: ReqStatusType

  """All values that are not equal to given value."""
  status_not: ReqStatusType

  """All values that are contained in given list."""
  status_in: [ReqStatusType!]

  """All values that are not contained in given list."""
  status_not_in: [ReqStatusType!]
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  to: UserWhereInput
  from: UserWhereInput
}

input FriendRequestWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createRequest(data: RequestCreateInput!): Request!
  createComment(data: CommentCreateInput!): Comment!
  createFriendRequest(data: FriendRequestCreateInput!): FriendRequest!
  createUser(data: UserCreateInput!): User!
  createRec(data: RecCreateInput!): Rec!
  updateRequest(data: RequestUpdateInput!, where: RequestWhereUniqueInput!): Request
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateFriendRequest(data: FriendRequestUpdateInput!, where: FriendRequestWhereUniqueInput!): FriendRequest
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateRec(data: RecUpdateInput!, where: RecWhereUniqueInput!): Rec
  deleteRequest(where: RequestWhereUniqueInput!): Request
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteFriendRequest(where: FriendRequestWhereUniqueInput!): FriendRequest
  deleteUser(where: UserWhereUniqueInput!): User
  deleteRec(where: RecWhereUniqueInput!): Rec
  upsertRequest(where: RequestWhereUniqueInput!, create: RequestCreateInput!, update: RequestUpdateInput!): Request!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  upsertFriendRequest(where: FriendRequestWhereUniqueInput!, create: FriendRequestCreateInput!, update: FriendRequestUpdateInput!): FriendRequest!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertRec(where: RecWhereUniqueInput!, create: RecCreateInput!, update: RecUpdateInput!): Rec!
  updateManyRequests(data: RequestUpdateManyMutationInput!, where: RequestWhereInput): BatchPayload!
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  updateManyFriendRequests(data: FriendRequestUpdateManyMutationInput!, where: FriendRequestWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyRecs(data: RecUpdateManyMutationInput!, where: RecWhereInput): BatchPayload!
  deleteManyRequests(where: RequestWhereInput): BatchPayload!
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  deleteManyFriendRequests(where: FriendRequestWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyRecs(where: RecWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  requests(where: RequestWhereInput, orderBy: RequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Request]!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  friendRequests(where: FriendRequestWhereInput, orderBy: FriendRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FriendRequest]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  recs(where: RecWhereInput, orderBy: RecOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Rec]!
  request(where: RequestWhereUniqueInput!): Request
  comment(where: CommentWhereUniqueInput!): Comment
  friendRequest(where: FriendRequestWhereUniqueInput!): FriendRequest
  user(where: UserWhereUniqueInput!): User
  rec(where: RecWhereUniqueInput!): Rec
  requestsConnection(where: RequestWhereInput, orderBy: RequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RequestConnection!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  friendRequestsConnection(where: FriendRequestWhereInput, orderBy: FriendRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FriendRequestConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  recsConnection(where: RecWhereInput, orderBy: RecOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RecConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Rec implements Node {
  id: ID!
  title: String!
  description: String!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  type: RecType!
  priority: Boolean!
  rating: Int!
  image: String!
  updatedAt: DateTime!
  createdAt: DateTime!
  bounty: Boolean!
  status: StatusType!
  fromUser: User!
  toUser: User!
}

"""A connection to a list of items."""
type RecConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RecEdge]!
  aggregate: AggregateRec!
}

input RecCreateInput {
  title: String!
  description: String!
  type: RecType!
  priority: Boolean!
  rating: Int!
  image: String!
  bounty: Boolean
  status: StatusType
  comments: CommentCreateManyWithoutRecInput
  fromUser: UserCreateOneWithoutSentRecsInput!
  toUser: UserCreateOneWithoutRecievedRecsInput!
}

input RecCreateManyInput {
  create: [RecCreateInput!]
  connect: [RecWhereUniqueInput!]
}

input RecCreateManyWithoutFromUserInput {
  create: [RecCreateWithoutFromUserInput!]
  connect: [RecWhereUniqueInput!]
}

input RecCreateManyWithoutToUserInput {
  create: [RecCreateWithoutToUserInput!]
  connect: [RecWhereUniqueInput!]
}

input RecCreateOneWithoutCommentsInput {
  create: RecCreateWithoutCommentsInput
  connect: RecWhereUniqueInput
}

input RecCreateWithoutCommentsInput {
  title: String!
  description: String!
  type: RecType!
  priority: Boolean!
  rating: Int!
  image: String!
  bounty: Boolean
  status: StatusType
  fromUser: UserCreateOneWithoutSentRecsInput!
  toUser: UserCreateOneWithoutRecievedRecsInput!
}

input RecCreateWithoutFromUserInput {
  title: String!
  description: String!
  type: RecType!
  priority: Boolean!
  rating: Int!
  image: String!
  bounty: Boolean
  status: StatusType
  comments: CommentCreateManyWithoutRecInput
  toUser: UserCreateOneWithoutRecievedRecsInput!
}

input RecCreateWithoutToUserInput {
  title: String!
  description: String!
  type: RecType!
  priority: Boolean!
  rating: Int!
  image: String!
  bounty: Boolean
  status: StatusType
  comments: CommentCreateManyWithoutRecInput
  fromUser: UserCreateOneWithoutSentRecsInput!
}

"""An edge in a connection."""
type RecEdge {
  """The item at the end of the edge."""
  node: Rec!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RecOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  type_ASC
  type_DESC
  priority_ASC
  priority_DESC
  rating_ASC
  rating_DESC
  image_ASC
  image_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  bounty_ASC
  bounty_DESC
  status_ASC
  status_DESC
}

type RecPreviousValues {
  id: ID!
  title: String!
  description: String!
  type: RecType!
  priority: Boolean!
  rating: Int!
  image: String!
  updatedAt: DateTime!
  createdAt: DateTime!
  bounty: Boolean!
  status: StatusType!
}

type RecSubscriptionPayload {
  mutation: MutationType!
  node: Rec
  updatedFields: [String!]
  previousValues: RecPreviousValues
}

input RecSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RecSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RecSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RecSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RecWhereInput
}

enum RecType {
  Television_show
  Movie
  Book
  Article
  Restaurant
}

input RecUpdateDataInput {
  title: String
  description: String
  type: RecType
  priority: Boolean
  rating: Int
  image: String
  bounty: Boolean
  status: StatusType
  comments: CommentUpdateManyWithoutRecInput
  fromUser: UserUpdateOneRequiredWithoutSentRecsInput
  toUser: UserUpdateOneRequiredWithoutRecievedRecsInput
}

input RecUpdateInput {
  title: String
  description: String
  type: RecType
  priority: Boolean
  rating: Int
  image: String
  bounty: Boolean
  status: StatusType
  comments: CommentUpdateManyWithoutRecInput
  fromUser: UserUpdateOneRequiredWithoutSentRecsInput
  toUser: UserUpdateOneRequiredWithoutRecievedRecsInput
}

input RecUpdateManyInput {
  create: [RecCreateInput!]
  connect: [RecWhereUniqueInput!]
  disconnect: [RecWhereUniqueInput!]
  delete: [RecWhereUniqueInput!]
  update: [RecUpdateWithWhereUniqueNestedInput!]
  upsert: [RecUpsertWithWhereUniqueNestedInput!]
}

input RecUpdateManyMutationInput {
  title: String
  description: String
  type: RecType
  priority: Boolean
  rating: Int
  image: String
  bounty: Boolean
  status: StatusType
}

input RecUpdateManyWithoutFromUserInput {
  create: [RecCreateWithoutFromUserInput!]
  connect: [RecWhereUniqueInput!]
  disconnect: [RecWhereUniqueInput!]
  delete: [RecWhereUniqueInput!]
  update: [RecUpdateWithWhereUniqueWithoutFromUserInput!]
  upsert: [RecUpsertWithWhereUniqueWithoutFromUserInput!]
}

input RecUpdateManyWithoutToUserInput {
  create: [RecCreateWithoutToUserInput!]
  connect: [RecWhereUniqueInput!]
  disconnect: [RecWhereUniqueInput!]
  delete: [RecWhereUniqueInput!]
  update: [RecUpdateWithWhereUniqueWithoutToUserInput!]
  upsert: [RecUpsertWithWhereUniqueWithoutToUserInput!]
}

input RecUpdateOneRequiredWithoutCommentsInput {
  create: RecCreateWithoutCommentsInput
  connect: RecWhereUniqueInput
  update: RecUpdateWithoutCommentsDataInput
  upsert: RecUpsertWithoutCommentsInput
}

input RecUpdateWithoutCommentsDataInput {
  title: String
  description: String
  type: RecType
  priority: Boolean
  rating: Int
  image: String
  bounty: Boolean
  status: StatusType
  fromUser: UserUpdateOneRequiredWithoutSentRecsInput
  toUser: UserUpdateOneRequiredWithoutRecievedRecsInput
}

input RecUpdateWithoutFromUserDataInput {
  title: String
  description: String
  type: RecType
  priority: Boolean
  rating: Int
  image: String
  bounty: Boolean
  status: StatusType
  comments: CommentUpdateManyWithoutRecInput
  toUser: UserUpdateOneRequiredWithoutRecievedRecsInput
}

input RecUpdateWithoutToUserDataInput {
  title: String
  description: String
  type: RecType
  priority: Boolean
  rating: Int
  image: String
  bounty: Boolean
  status: StatusType
  comments: CommentUpdateManyWithoutRecInput
  fromUser: UserUpdateOneRequiredWithoutSentRecsInput
}

input RecUpdateWithWhereUniqueNestedInput {
  where: RecWhereUniqueInput!
  data: RecUpdateDataInput!
}

input RecUpdateWithWhereUniqueWithoutFromUserInput {
  where: RecWhereUniqueInput!
  data: RecUpdateWithoutFromUserDataInput!
}

input RecUpdateWithWhereUniqueWithoutToUserInput {
  where: RecWhereUniqueInput!
  data: RecUpdateWithoutToUserDataInput!
}

input RecUpsertWithoutCommentsInput {
  update: RecUpdateWithoutCommentsDataInput!
  create: RecCreateWithoutCommentsInput!
}

input RecUpsertWithWhereUniqueNestedInput {
  where: RecWhereUniqueInput!
  update: RecUpdateDataInput!
  create: RecCreateInput!
}

input RecUpsertWithWhereUniqueWithoutFromUserInput {
  where: RecWhereUniqueInput!
  update: RecUpdateWithoutFromUserDataInput!
  create: RecCreateWithoutFromUserInput!
}

input RecUpsertWithWhereUniqueWithoutToUserInput {
  where: RecWhereUniqueInput!
  update: RecUpdateWithoutToUserDataInput!
  create: RecCreateWithoutToUserInput!
}

input RecWhereInput {
  """Logical AND on all given filters."""
  AND: [RecWhereInput!]

  """Logical OR on all given filters."""
  OR: [RecWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RecWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  type: RecType

  """All values that are not equal to given value."""
  type_not: RecType

  """All values that are contained in given list."""
  type_in: [RecType!]

  """All values that are not contained in given list."""
  type_not_in: [RecType!]
  priority: Boolean

  """All values that are not equal to given value."""
  priority_not: Boolean
  rating: Int

  """All values that are not equal to given value."""
  rating_not: Int

  """All values that are contained in given list."""
  rating_in: [Int!]

  """All values that are not contained in given list."""
  rating_not_in: [Int!]

  """All values less than the given value."""
  rating_lt: Int

  """All values less than or equal the given value."""
  rating_lte: Int

  """All values greater than the given value."""
  rating_gt: Int

  """All values greater than or equal the given value."""
  rating_gte: Int
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  bounty: Boolean

  """All values that are not equal to given value."""
  bounty_not: Boolean
  status: StatusType

  """All values that are not equal to given value."""
  status_not: StatusType

  """All values that are contained in given list."""
  status_in: [StatusType!]

  """All values that are not contained in given list."""
  status_not_in: [StatusType!]
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  fromUser: UserWhereInput
  toUser: UserWhereInput
}

input RecWhereUniqueInput {
  id: ID
}

enum ReqStatusType {
  NEW
  ACCEPTED
  REJECTED
  PENDING
}

type Request implements Node {
  id: ID!
  type: RecType!
  description: String!
  recommendations(where: RecWhereInput, orderBy: RecOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Rec!]
  updatedAt: DateTime!
  createdAt: DateTime!
  expires: DateTime
  requester: User!
}

"""A connection to a list of items."""
type RequestConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RequestEdge]!
  aggregate: AggregateRequest!
}

input RequestCreateInput {
  type: RecType!
  description: String!
  expires: DateTime
  recommendations: RecCreateManyInput
  requester: UserCreateOneWithoutRequestsInput!
}

input RequestCreateManyWithoutRequesterInput {
  create: [RequestCreateWithoutRequesterInput!]
  connect: [RequestWhereUniqueInput!]
}

input RequestCreateWithoutRequesterInput {
  type: RecType!
  description: String!
  expires: DateTime
  recommendations: RecCreateManyInput
}

"""An edge in a connection."""
type RequestEdge {
  """The item at the end of the edge."""
  node: Request!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RequestOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  expires_ASC
  expires_DESC
}

type RequestPreviousValues {
  id: ID!
  type: RecType!
  description: String!
  updatedAt: DateTime!
  createdAt: DateTime!
  expires: DateTime
}

type RequestSubscriptionPayload {
  mutation: MutationType!
  node: Request
  updatedFields: [String!]
  previousValues: RequestPreviousValues
}

input RequestSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RequestSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RequestSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RequestSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RequestWhereInput
}

input RequestUpdateInput {
  type: RecType
  description: String
  expires: DateTime
  recommendations: RecUpdateManyInput
  requester: UserUpdateOneRequiredWithoutRequestsInput
}

input RequestUpdateManyMutationInput {
  type: RecType
  description: String
  expires: DateTime
}

input RequestUpdateManyWithoutRequesterInput {
  create: [RequestCreateWithoutRequesterInput!]
  connect: [RequestWhereUniqueInput!]
  disconnect: [RequestWhereUniqueInput!]
  delete: [RequestWhereUniqueInput!]
  update: [RequestUpdateWithWhereUniqueWithoutRequesterInput!]
  upsert: [RequestUpsertWithWhereUniqueWithoutRequesterInput!]
}

input RequestUpdateWithoutRequesterDataInput {
  type: RecType
  description: String
  expires: DateTime
  recommendations: RecUpdateManyInput
}

input RequestUpdateWithWhereUniqueWithoutRequesterInput {
  where: RequestWhereUniqueInput!
  data: RequestUpdateWithoutRequesterDataInput!
}

input RequestUpsertWithWhereUniqueWithoutRequesterInput {
  where: RequestWhereUniqueInput!
  update: RequestUpdateWithoutRequesterDataInput!
  create: RequestCreateWithoutRequesterInput!
}

input RequestWhereInput {
  """Logical AND on all given filters."""
  AND: [RequestWhereInput!]

  """Logical OR on all given filters."""
  OR: [RequestWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RequestWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  type: RecType

  """All values that are not equal to given value."""
  type_not: RecType

  """All values that are contained in given list."""
  type_in: [RecType!]

  """All values that are not contained in given list."""
  type_not_in: [RecType!]
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  expires: DateTime

  """All values that are not equal to given value."""
  expires_not: DateTime

  """All values that are contained in given list."""
  expires_in: [DateTime!]

  """All values that are not contained in given list."""
  expires_not_in: [DateTime!]

  """All values less than the given value."""
  expires_lt: DateTime

  """All values less than or equal the given value."""
  expires_lte: DateTime

  """All values greater than the given value."""
  expires_gt: DateTime

  """All values greater than or equal the given value."""
  expires_gte: DateTime
  recommendations_every: RecWhereInput
  recommendations_some: RecWhereInput
  recommendations_none: RecWhereInput
  requester: UserWhereInput
}

input RequestWhereUniqueInput {
  id: ID
}

enum StatusType {
  NEW
  SEEN
  DISCARDED
  BOOKMARKED
}

type Subscription {
  request(where: RequestSubscriptionWhereInput): RequestSubscriptionPayload
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  friendRequest(where: FriendRequestSubscriptionWhereInput): FriendRequestSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  rec(where: RecSubscriptionWhereInput): RecSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  username: String!
  password: String!
  friends(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  sentRecs(where: RecWhereInput, orderBy: RecOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Rec!]
  recievedRecs(where: RecWhereInput, orderBy: RecOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Rec!]
  requests(where: RequestWhereInput, orderBy: RequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Request!]
  sentFriendRequests(where: FriendRequestWhereInput, orderBy: FriendRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FriendRequest!]
  receivedFriendRequests(where: FriendRequestWhereInput, orderBy: FriendRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FriendRequest!]
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  username: String!
  password: String!
  friends: UserCreateManyInput
  sentRecs: RecCreateManyWithoutFromUserInput
  recievedRecs: RecCreateManyWithoutToUserInput
  requests: RequestCreateManyWithoutRequesterInput
  sentFriendRequests: FriendRequestCreateManyWithoutFromInput
  receivedFriendRequests: FriendRequestCreateManyWithoutToInput
  comments: CommentCreateManyWithoutAuthorInput
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutReceivedFriendRequestsInput {
  create: UserCreateWithoutReceivedFriendRequestsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutRecievedRecsInput {
  create: UserCreateWithoutRecievedRecsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutRequestsInput {
  create: UserCreateWithoutRequestsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSentFriendRequestsInput {
  create: UserCreateWithoutSentFriendRequestsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSentRecsInput {
  create: UserCreateWithoutSentRecsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCommentsInput {
  name: String!
  email: String!
  username: String!
  password: String!
  friends: UserCreateManyInput
  sentRecs: RecCreateManyWithoutFromUserInput
  recievedRecs: RecCreateManyWithoutToUserInput
  requests: RequestCreateManyWithoutRequesterInput
  sentFriendRequests: FriendRequestCreateManyWithoutFromInput
  receivedFriendRequests: FriendRequestCreateManyWithoutToInput
}

input UserCreateWithoutReceivedFriendRequestsInput {
  name: String!
  email: String!
  username: String!
  password: String!
  friends: UserCreateManyInput
  sentRecs: RecCreateManyWithoutFromUserInput
  recievedRecs: RecCreateManyWithoutToUserInput
  requests: RequestCreateManyWithoutRequesterInput
  sentFriendRequests: FriendRequestCreateManyWithoutFromInput
  comments: CommentCreateManyWithoutAuthorInput
}

input UserCreateWithoutRecievedRecsInput {
  name: String!
  email: String!
  username: String!
  password: String!
  friends: UserCreateManyInput
  sentRecs: RecCreateManyWithoutFromUserInput
  requests: RequestCreateManyWithoutRequesterInput
  sentFriendRequests: FriendRequestCreateManyWithoutFromInput
  receivedFriendRequests: FriendRequestCreateManyWithoutToInput
  comments: CommentCreateManyWithoutAuthorInput
}

input UserCreateWithoutRequestsInput {
  name: String!
  email: String!
  username: String!
  password: String!
  friends: UserCreateManyInput
  sentRecs: RecCreateManyWithoutFromUserInput
  recievedRecs: RecCreateManyWithoutToUserInput
  sentFriendRequests: FriendRequestCreateManyWithoutFromInput
  receivedFriendRequests: FriendRequestCreateManyWithoutToInput
  comments: CommentCreateManyWithoutAuthorInput
}

input UserCreateWithoutSentFriendRequestsInput {
  name: String!
  email: String!
  username: String!
  password: String!
  friends: UserCreateManyInput
  sentRecs: RecCreateManyWithoutFromUserInput
  recievedRecs: RecCreateManyWithoutToUserInput
  requests: RequestCreateManyWithoutRequesterInput
  receivedFriendRequests: FriendRequestCreateManyWithoutToInput
  comments: CommentCreateManyWithoutAuthorInput
}

input UserCreateWithoutSentRecsInput {
  name: String!
  email: String!
  username: String!
  password: String!
  friends: UserCreateManyInput
  recievedRecs: RecCreateManyWithoutToUserInput
  requests: RequestCreateManyWithoutRequesterInput
  sentFriendRequests: FriendRequestCreateManyWithoutFromInput
  receivedFriendRequests: FriendRequestCreateManyWithoutToInput
  comments: CommentCreateManyWithoutAuthorInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  username: String!
  password: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  name: String
  email: String
  username: String
  password: String
  friends: UserUpdateManyInput
  sentRecs: RecUpdateManyWithoutFromUserInput
  recievedRecs: RecUpdateManyWithoutToUserInput
  requests: RequestUpdateManyWithoutRequesterInput
  sentFriendRequests: FriendRequestUpdateManyWithoutFromInput
  receivedFriendRequests: FriendRequestUpdateManyWithoutToInput
  comments: CommentUpdateManyWithoutAuthorInput
}

input UserUpdateInput {
  name: String
  email: String
  username: String
  password: String
  friends: UserUpdateManyInput
  sentRecs: RecUpdateManyWithoutFromUserInput
  recievedRecs: RecUpdateManyWithoutToUserInput
  requests: RequestUpdateManyWithoutRequesterInput
  sentFriendRequests: FriendRequestUpdateManyWithoutFromInput
  receivedFriendRequests: FriendRequestUpdateManyWithoutToInput
  comments: CommentUpdateManyWithoutAuthorInput
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  username: String
  password: String
}

input UserUpdateOneRequiredWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneRequiredWithoutReceivedFriendRequestsInput {
  create: UserCreateWithoutReceivedFriendRequestsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutReceivedFriendRequestsDataInput
  upsert: UserUpsertWithoutReceivedFriendRequestsInput
}

input UserUpdateOneRequiredWithoutRecievedRecsInput {
  create: UserCreateWithoutRecievedRecsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutRecievedRecsDataInput
  upsert: UserUpsertWithoutRecievedRecsInput
}

input UserUpdateOneRequiredWithoutRequestsInput {
  create: UserCreateWithoutRequestsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutRequestsDataInput
  upsert: UserUpsertWithoutRequestsInput
}

input UserUpdateOneRequiredWithoutSentFriendRequestsInput {
  create: UserCreateWithoutSentFriendRequestsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutSentFriendRequestsDataInput
  upsert: UserUpsertWithoutSentFriendRequestsInput
}

input UserUpdateOneRequiredWithoutSentRecsInput {
  create: UserCreateWithoutSentRecsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutSentRecsDataInput
  upsert: UserUpsertWithoutSentRecsInput
}

input UserUpdateWithoutCommentsDataInput {
  name: String
  email: String
  username: String
  password: String
  friends: UserUpdateManyInput
  sentRecs: RecUpdateManyWithoutFromUserInput
  recievedRecs: RecUpdateManyWithoutToUserInput
  requests: RequestUpdateManyWithoutRequesterInput
  sentFriendRequests: FriendRequestUpdateManyWithoutFromInput
  receivedFriendRequests: FriendRequestUpdateManyWithoutToInput
}

input UserUpdateWithoutReceivedFriendRequestsDataInput {
  name: String
  email: String
  username: String
  password: String
  friends: UserUpdateManyInput
  sentRecs: RecUpdateManyWithoutFromUserInput
  recievedRecs: RecUpdateManyWithoutToUserInput
  requests: RequestUpdateManyWithoutRequesterInput
  sentFriendRequests: FriendRequestUpdateManyWithoutFromInput
  comments: CommentUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutRecievedRecsDataInput {
  name: String
  email: String
  username: String
  password: String
  friends: UserUpdateManyInput
  sentRecs: RecUpdateManyWithoutFromUserInput
  requests: RequestUpdateManyWithoutRequesterInput
  sentFriendRequests: FriendRequestUpdateManyWithoutFromInput
  receivedFriendRequests: FriendRequestUpdateManyWithoutToInput
  comments: CommentUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutRequestsDataInput {
  name: String
  email: String
  username: String
  password: String
  friends: UserUpdateManyInput
  sentRecs: RecUpdateManyWithoutFromUserInput
  recievedRecs: RecUpdateManyWithoutToUserInput
  sentFriendRequests: FriendRequestUpdateManyWithoutFromInput
  receivedFriendRequests: FriendRequestUpdateManyWithoutToInput
  comments: CommentUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutSentFriendRequestsDataInput {
  name: String
  email: String
  username: String
  password: String
  friends: UserUpdateManyInput
  sentRecs: RecUpdateManyWithoutFromUserInput
  recievedRecs: RecUpdateManyWithoutToUserInput
  requests: RequestUpdateManyWithoutRequesterInput
  receivedFriendRequests: FriendRequestUpdateManyWithoutToInput
  comments: CommentUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutSentRecsDataInput {
  name: String
  email: String
  username: String
  password: String
  friends: UserUpdateManyInput
  recievedRecs: RecUpdateManyWithoutToUserInput
  requests: RequestUpdateManyWithoutRequesterInput
  sentFriendRequests: FriendRequestUpdateManyWithoutFromInput
  receivedFriendRequests: FriendRequestUpdateManyWithoutToInput
  comments: CommentUpdateManyWithoutAuthorInput
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput!
  create: UserCreateWithoutCommentsInput!
}

input UserUpsertWithoutReceivedFriendRequestsInput {
  update: UserUpdateWithoutReceivedFriendRequestsDataInput!
  create: UserCreateWithoutReceivedFriendRequestsInput!
}

input UserUpsertWithoutRecievedRecsInput {
  update: UserUpdateWithoutRecievedRecsDataInput!
  create: UserCreateWithoutRecievedRecsInput!
}

input UserUpsertWithoutRequestsInput {
  update: UserUpdateWithoutRequestsDataInput!
  create: UserCreateWithoutRequestsInput!
}

input UserUpsertWithoutSentFriendRequestsInput {
  update: UserUpdateWithoutSentFriendRequestsDataInput!
  create: UserCreateWithoutSentFriendRequestsInput!
}

input UserUpsertWithoutSentRecsInput {
  update: UserUpdateWithoutSentRecsDataInput!
  create: UserCreateWithoutSentRecsInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  friends_every: UserWhereInput
  friends_some: UserWhereInput
  friends_none: UserWhereInput
  sentRecs_every: RecWhereInput
  sentRecs_some: RecWhereInput
  sentRecs_none: RecWhereInput
  recievedRecs_every: RecWhereInput
  recievedRecs_some: RecWhereInput
  recievedRecs_none: RecWhereInput
  requests_every: RequestWhereInput
  requests_some: RequestWhereInput
  requests_none: RequestWhereInput
  sentFriendRequests_every: FriendRequestWhereInput
  sentFriendRequests_some: FriendRequestWhereInput
  sentFriendRequests_none: FriendRequestWhereInput
  receivedFriendRequests_every: FriendRequestWhereInput
  receivedFriendRequests_some: FriendRequestWhereInput
  receivedFriendRequests_none: FriendRequestWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
  username: String
}
