type Query {
    users(query: String):[User!]!
    myRecs(query: String): [Rec!]!
    me: User!
  }

type Mutation {
  createUser(data: CreateUserInput!): AuthPayload!
  login(data: LoginUserInput): AuthPayload!
  deleteUser(id: ID!): User!
  updateUser(id: ID!, data: UpdateUserInput): User!
  createRec(data: CreateRecInput!): Rec!
}

type AuthPayload {
  token: String!
  user: User!
}

input CreateUserInput {
  name: String!
  email: String!
  username: String!
  password: String!
}

input LoginUserInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  name: String
  email: String
  username: String
  password: String
}

input CreateRecInput {
  title: String!
  description: String!
  comments: String
  response: String
  priority: Boolean!
  type: RecType!
  rating: Int!
  image: String!
  toUser: ID!
}

type User {
  id: ID!
  name: String!
  email: String!
  username: String!
  password: String!
  friends: [User!]!
  sentRecs: [Rec!]!
  recievedRecs: [Rec!]!
  receivedFriendRequests: [FriendRequest!]!
  updatedAt: String!
  createdAt: String!
}

type Rec {
  id: ID!
  title: String!
  description: String!
  comments: [Comment!]!
  response: String
  type: String!
  priority: Boolean!
  rating: Int!
  image: String!
  updatedAt: String!
  createdAt: String!
  status: String!
  fromUser: User!
  toUser: User!
}

type Comment {
  id: ID!
  text: String!
  author: User!
  rec: Rec!
}

type FriendRequest {
  id: ID!
  to: User!
  from: User!
  status: ReqStatusType!
}

enum RecType {
  Television_show
  Movie
  Book
  Article
  Restaurant
}

enum StatusType {
  NEW
  SEEN 
  DISCARDED
  BOOKMARKED
}

enum ReqStatusType {
  NEW
  ACCEPTED
  REJECTED
  PENDING
}
